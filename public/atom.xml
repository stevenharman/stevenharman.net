<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Harman]]></title>
  <link href="http://stevenharman.heroku.com/atom.xml" rel="self"/>
  <link href="http://stevenharman.heroku.com/"/>
  <updated>2012-02-04T13:56:22-05:00</updated>
  <id>http://stevenharman.heroku.com/</id>
  <author>
    <name><![CDATA[Steven Harman]]></name>
    <email><![CDATA[contact@stevenharman.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Another Git Repository Visualization, Just for Fun.]]></title>
    <link href="http://stevenharman.heroku.com/another-git-repository-visualization-just-for-fun/"/>
    <updated>2011-07-01T21:46:00-04:00</updated>
    <id>http://stevenharman.heroku.com/another-git-repository-visualization-just-for-fun</id>
    <content type="html"><![CDATA[<p>I’ve created visualizations for Git repositories before – the one tracked a <a href="http://stevenharman.heroku.com/gain-new-insights-by-visualizing-what-youve-already-got" title="Gain New Insights by Visualizing What You’ve Already Got">product from its first commit through launch</a>. And while I still think there is some information and insight to be gleaned from such visualizations, the real reason I like to make them is&#8230; I think they&#8217;re neat.</p>

<p>To celebrate launching the latest incarnation of <a href="http://versionone.com/" title="VersionOne - it's pronounced Agilé">VersionOne</a>, I made another visualization! This one tracks all changes made in our Git repository that occurred between our last major release (in late February) right through the very last commit that made it into the <a href="http://www.versionone.com/release/2011/spring/" title="VersionOne Spring 2011 Release">Spring 2011 release</a>.</p>

<p>Wow… that really sounded like a sales pitch, didn’t it? I hate sales pitches!</p>

<p>Enough of that. Enjoy!</p>

<object width="560" height="315"><param name="movie" value="http://www.youtube.com/v/fYv9XgzY9Cc?version=3&amp;hl=en_US&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/fYv9XgzY9Cc?version=3&amp;hl=en_US&amp;rel=0" type="application/x-shockwave-flash" width="560" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Pull with Automatic Rebase]]></title>
    <link href="http://stevenharman.heroku.com/git-pull-with-automatic-rebase/"/>
    <updated>2011-06-09T22:57:00-04:00</updated>
    <id>http://stevenharman.heroku.com/git-pull-with-automatic-rebase</id>
    <content type="html"><![CDATA[<p>To rebase, or not to rebase - for me its not really a question. I
generally prefer a clean, linear commit history. Why? Because merge bubbles make
history confusing, noisy, break <code>git bisect</code>.</p>

<p><a href="https://skitch.com/stevenharman/fdhm5/y-u-no-rebase"><img class="thumbnail right" src="https://img.skitch.com/20110609-jhy91eh42t193wquj6ryi91ura.preview.jpg" title="Y U NO REBASE!?!" alt="y-u-no-rebase"></a>
Don&#8217;t believe me? Check out the pretty log to the right. See all
those merge bubbles in there? <em>Eww!</em></p>

<h3>The Why?</h3>


<p>The workflow that caused those merges was as follows:</p>

<ol>
<li><code>git pull</code> (to bring local up to date)</li>
<li><em>hackity-hack</em></li>
<li><code>git commit</code></li>
<li><code>git pull</code></li>
<li><code>git push</code></li>
</ol>


<p>By default <code>git pull</code> will fetch any new commits from the remote, and
then merge any local changes in, resulting in the merge bubbles.</p>

<!-- more -->




<h3>A better approach</h3>


<p>I typically use the same workflow as above with one tweak. Rather than <code>git
pull</code> I use <code>git pull --rebase</code> which will fetch the remote commits,
and rebase your commits on top of the new commits from the remote. This is the
&acirc;&euro;&oelig;re-writing&acirc;&euro; of history folks often talk about.</p>

<h3>Make it better, automatically!</h3>


<p>You can tell git to use rebase, rather than merge, in one of two ways, depending on
your situation.</p>

<figure class='code'><figcaption><span>Force all new branches to automatically use rebase  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config branch.autosetuprebase always
</span></code></pre></td></tr></table></div></figure>


<p>You can add the <code>--global</code> switch to have all future branches, in all
repositories on this machine, behave this way.</p>

<figure class='code'><figcaption><span>Force existing branches to use rebase.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config branch.*branch-name*.rebase <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Get more info</h3>


<p>Be sure to check out the <a title="git-config Manual Page" href=
"http://www.kernel.org/pub/software/scm/git/docs/git-config.html" rel="external">git
man pages</a> for more info on what those options mean and when you may or may not want
to use them.</p>

<p>You might also want to check out my <a title="Git Workflows" href=
"https://github.com/stevenharman/git-workflows" rel="external">Git Workflows repository
on The GitHubs</a> where you can find a Keynote presentation (or PDF in the Downloads)
explaining <code>git rebase</code> vs. <code>git merge</code> Complete with
pictures!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Io Language Vim Plugin]]></title>
    <link href="http://stevenharman.heroku.com/an-io-language-vim-plugin/"/>
    <updated>2011-02-11T16:27:00-05:00</updated>
    <id>http://stevenharman.heroku.com/an-io-language-vim-plugin</id>
    <content type="html"><![CDATA[<p>Who here doesn&#8217;t enjoy a little color in their life? I know I do, especially when
used to highlight the syntax of a language - as anyone who&#8217;s been around me while
downing a few pints can attest!</p>

<h3>Learning, Io, and Vim</h3>


<p><a href="http://stevenharman.heroku.com/images/posts/io-syntax.png"><img class="left" src="http://stevenharman.heroku.com/images/posts/io-syntax-thumb.png" title="Io Syntax Highlighting in Vim" ></a></p>

<p>In an attempt to feed our insatiable desire to learn, a
few of us at <a title="VersionOne: Simplifying Software Delivery" href=
"http://versionone.com" rel="external">VersionOne</a> are doing a book club on
<a title="Seven Languages in Seven Weeks: A Pragmatic Guide to Learning Programming Languages"
href=
"http://www.amazon.com/gp/product/193435659X?ie=UTF8&amp;tag=stevenharman-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=193435659X"
rel="external">Seven Languages in Seven Weeks</a>. We&#8217;re currently working on chapter
2: <a title="Io Language" href="http://iolanguage.com/" rel="external">Io</a>. My
current favorite editor is Vim. I wanted syntax highlighting for Io, in Vim.</p>

<p>I found a decent Vim script to get Io syntax highlighting, and then wrote a quick
<code>ftdetect</code> script to set Io-related files to use the Io syntax. The
resulting vim-io plugin is currently embedded <a title="vim-io: Io, for Vim!" href=
"https://github.com/stevenharman/config/tree/master/.vim/bundle/vim-io" rel=
"external">in my dotfiles on the GitHubs</a>, but if there&#8217;s interest I can pull them
out into a standalone plugin.</p>

<p>Grab it, enjoy it, fork and improve it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caps Lock is Dumb; Make it Useful]]></title>
    <link href="http://stevenharman.heroku.com/caps-lock-is-dumb-make-it-useful/"/>
    <updated>2011-01-20T12:00:00-05:00</updated>
    <id>http://stevenharman.heroku.com/caps-lock-is-dumb-make-it-useful</id>
    <content type="html"><![CDATA[<p>I&#8217;ve long thought that <code>Caps Lock</code> was quite dumb. Yes, I&#8217;m sure there
is some archaic reason it exists, but the truth is I don&#8217;t care. I don&#8217;t
find it useful and am annoyed that it&#8217;s taking up valuable room on my <a
title="The Home Row and Touch Typing"
href="http://en.wikipedia.org/wiki/Touch_typing" rel="external">Home
Row</a>. The more I use Vim the more angry I get at the <code>Caps Lock</code> key.</p>

<h3>Making Caps Lock Useful, on The Mac</h3>

<p>I long ago remapped <code>Caps Lock</code> to <code>Esc</code> on my Mac - which worked
great for <a title="the missing editor" href="http://macromates.com/"
rel="external">TextMate</a>. However, these days I spend the majority of
my time in <a title="Vim for the Mac"
href="http://code.google.com/p/macvim/" rel="external">Vim</a> or <a
title="Zeee Shell" href="http://www.zsh.org/" rel="external">Zsh</a> (in
Vim mode) where I&#8217;d much prefer to have <code>Ctrl</code> on my Home Row.
Remapping <code>Caps Lock</code> to <code>Ctrl</code> is trivial on OS X; it&#8217;s baked in
via <em>System Preferences > Keyboard Preferences > Modifier Keys</em>.</p>

<!-- more -->


<h3>Making Caps Lock Useful, on The Windows</h3>

<p>To my knowledge, there is nothing baked into the <acronym
title="Operating System">OS</acronym> that makes this easy, but there
are a handful of utilities that will let you remap most keys. I opted
for the Lo-Fi route - hacking the registry to remap <code>Caps Lock</code> to
<code>Ctrl</code>.</p>

<div><script src='https://gist.github.com/788631.js?file='></script>
<noscript><pre><code>REGEDIT4
 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
 &quot;Scancode Map&quot;=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00
</code></pre></noscript></div>


<p>To use it, just download/save the raw <code>.reg</code> file to your Windows box,
and the run (double-click, whatever) it.</p>

<p>And there you have it. Good bye, annoying <code>Caps Lock</code>. Hello, useful
stuff!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A First Step to Better User Experience: Thinking Like a Human]]></title>
    <link href="http://stevenharman.heroku.com/a-first-step-to-better-user-experience-thinking-like-a-human/"/>
    <updated>2010-12-08T12:18:00-05:00</updated>
    <id>http://stevenharman.heroku.com/a-first-step-to-better-user-experience-thinking-like-a-human</id>
    <content type="html"><![CDATA[<p>As we strive to build more humane user experiences it is important to
not only consider what data to, or <em>not to</em>, show, but also <em>how</em> we
present that data.</p>

<p>An example from our recent <a title="VersionOne: Conversations"
href="http://versionone.com/Product/Collaboration.asp"
rel="external">Conversations</a> feature is the date and time at which
portions of a conversation take place.</p>

<p><a href="http://stevenharman.heroku.com/images/posts/fuzzy-time.png"><img class="left" src="http://stevenharman.heroku.com/images/posts/fuzzy-time-thumb.png" title="humate date and time via jquery.timeago" ></a>
Notice the two highlighted areas. The
tooltip shows fully-formatted, and much more precise information, with
the &#8220;less than a minute ago&#8221; text being a more fuzzy, human-friendly
presentation of the same data.</p>

<p>There is no question that the precise data is valuable, but when it
comes to human users of a system, it may not be the most consumable
form. The full-fidelity information is still available to the user who
cares to engage the application, when he cares to engage it.</p>

<p>Whether its fuzzy dates and time, or using avatars instead of user
names, or any number of other examples, the point is to <em>think</em> about
the human experience when designing for, well, humans.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Handful of Git Workflows for the Agilist]]></title>
    <link href="http://stevenharman.heroku.com/a-handful-of-git-workflows-for-the-agilist/"/>
    <updated>2010-08-12T12:44:00-04:00</updated>
    <id>http://stevenharman.heroku.com/a-handful-of-git-workflows-for-the-agilist</id>
    <content type="html"><![CDATA[<p>A few months back I gave <a href="http://www.thepathtoagility.org/" title="the path to agility conference">little talk</a> on the darling <acronym
title="Source Control Management">SCM</acronym> tool of the Open Source
world, <a href="http://git-scm.com/" title="Git: the fast version control system">Git</a>. After the conference, the organizers asked for a copy
of the presentation materials I&#8217;d used - something I usually find little
value in as the content of a discussion is far more than just the
collateral used.</p>

<p>At any rate, I obliged, sent off a PDF, and have <a href="http://github.com/stevenharman/git-workflows" title="a handful of Git workflows for the agilist">opened the talk up</a>
for others to use and improve. You can find the source (Keynote
presentation, images, etc.) on GitHub. Fork and modify the talk to your
heart&#8217;s content. ♡</p>

<p>Oh, and the <a href="http://github.com/stevenharman/git-workflows/downloads" title="download the PDF version">PDF is there</a> too.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Want to Make Money? Make Getting Paid the Easy Part!]]></title>
    <link href="http://stevenharman.heroku.com/want-to-make-money-make-getting-paid-the-easy-part/"/>
    <updated>2010-04-07T12:52:00-04:00</updated>
    <id>http://stevenharman.heroku.com/want-to-make-money-make-getting-paid-the-easy-part</id>
    <content type="html"><![CDATA[<p>At least half a dozen times in the past three days I&#8217;ve been so annoyed
by the payment process for various goods and/or services that I either
didn&#8217;t purchase the thing, or had a minor meltdown after the whole
ordeal was over.</p>

<p>Why do merchants insist on making it so damned difficult for their
customers to get the goods?</p>

<h3>A few frustrating examples</h3>

<p>Ever been to a sporting event where the beer vendor only accept cash,
has no cash-register, and yet insists on charging a partial dollar
amount per unit of booze? $6.65 for a beer. Really? Just call it $7
and make the math easy for everyone. Or have a cash register at each
kiosk. Or, here&#8217;s a novel idea, start accepting plastic!</p>

<p>Need to renew your vehicle registration? Just do it online! But be
prepared to spend an extra $5 for the <em>convenience</em> of, you knowâ€¦
actually giving them the money now rather than sending a check and them
having to pay someone to physically handle the thing.</p>

<h3>Two simple rules for making money</h3>

<ol>
<li>If you&#8217;re selling something someone wants: <strong>make it easy for them to
give you their money!</strong></li>
<li>If you&#8217;re selling something someone does not want: <strong>make them want
it!</strong></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gain New Insights by Visualizing What You’ve Already Got]]></title>
    <link href="http://stevenharman.heroku.com/gain-new-insights-by-visualizing-what-youve-already-got/"/>
    <updated>2010-02-24T22:32:00-05:00</updated>
    <id>http://stevenharman.heroku.com/gain-new-insights-by-visualizing-what-youve-already-got</id>
    <content type="html"><![CDATA[<p>I don’t know about you, but I like pretty things. Things that engage me. Shiny things. I enjoy seeing <em>the same old thing</em> in new and interesting ways. I suppose I’m just a visual kinda’ guy.</p>

<p>Unfortunately, the desire for visual representation is at odds with the high bandwidth flood of information we’re subjected to these days. Even if we manage to trim the overwhelming flood of information down to a laser-focused stream, it still takes an immense amount of effort to make sense of it.</p>

<h3>For example</h3>


<p>For years the primary way we’ve looked at the activity or interaction within various source control management systems is via log files. Yep… plain, text-laden, indecipherable logs chock full of entries each a similitude of it’s predecessors.</p>

<object width="560" height="315"><param name="movie" value="http://www.youtube.com/v/S_mMKXFaLaE?version=3&amp;hl=en_US&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/S_mMKXFaLaE?version=3&amp;hl=en_US&amp;rel=0" type="application/x-shockwave-flash" width="560" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>




<!-- more -->


<p>However, thanks to projects like <a title="Processing" href="http://processing.org/" rel="external">Processing</a> there may be a change on the horizon. Using tools of their ilk we can build exciting new ways to <em>see</em> and consume the vast seas of data we’re drowning in. By visualizing the data we are able to discover new and interesting patterns, behaviors, and insights.</p>

<h3>An example</h3>


<p>The video to the right is an example of one such visualization I produced using <a title="Gource - software version control visualization" href="http://code.google.com/p/gource/" rel="external">Gource</a> to analyze the Git repository of one of the product’s we’ve build at <a title="VersionOne: Simplifying Software Delivery" href="http://versionone.com/" rel="external">VersionOne</a>.</p>

<p>For reference, each branch (line) is a different directory containing files. Each leaf (dot) is a file, and different file types (Ruby, JavaScript, C#, etc.) have different colors. Each contributor is represented by their name and Gravatar.  The colored lines that occasionally connect a contributor to a file are color coded to represent adds (green), changes (orange) and deletes (red).</p>

<p>A few interesting things this visualization leads me to think about are</p>

<ul>
<li>how much churn happens in various parts of the code base?</li>
<li>where are we spending time?</li>
<li>is new-feature work well isolated? (perhaps an indicator of composition)</li>
<li>are there <em>specialists</em> within the team?</li>
</ul>


<p>Do any interesting things pop to mind when you watch the video? Let me know by leaving a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Don't We Ask Why?]]></title>
    <link href="http://stevenharman.heroku.com/why-dont-we-ask-why/"/>
    <updated>2010-02-18T12:58:00-05:00</updated>
    <id>http://stevenharman.heroku.com/why-dont-we-ask-why</id>
    <content type="html"><![CDATA[<p>Have you ever thought about just how much time we software folk spend
focused on the technologies we&#8217;re using, on implementation minutia,
and on all of the shiny new <em>solutions</em> we <em>should</em> be using?</p>

<p><a href="http://www.flickr.com/photos/marcobellucci/3534516458/" title="photo via: http://www.flickr.com/photos/marcobellucci/3534516458/"><img class="right" src="http://stevenharman.heroku.com/images/posts/question-mark.jpg"></a></p>

<p>Now contrast that with how often we stop to think about the <strong>Whys</strong>?</p>

<p>Why are we being asked to solve <em>fizz-buzz-thing</em>; do we understand the
motivation and context behind the problem, or are we fixated on how
we&#8217;ll build the solution? Are we asking why a problem occurred, or are
we merely focused on how we fixed it, this time?</p>

<h3>Why don&#8217;t we ask &#8220;Why?&#8221;</h3>

<p>Frankly, because we&#8217;d rather spend our time in the comfortable arena
of <strong>how</strong> than venture into the sometimes uneasy realm of <strong>why</strong>.</p>

<blockquote><p>She didn&#8217;t want to know how a thing was done, but why. That can be<br/>embarrassing. You ask *Why* to a lot of things and you wind up<br/>very unhappy indeed, if you keep at it.<br/>- Captain Beatty</p><footer><strong>Ray Bradburry</strong> <cite><a href='http://www.amazon.com/dp/0345342968/?tag=stevenharman-20'>Fahrenheit 451</a></cite></footer></blockquote>




<!-- more -->


<p>Asking why often forces us to face the truth, and that truth can be
uncomfortable. We need to have the courage to face those truths and
coninue to ask why; we must have the <a href="http://en.wikipedia.org/wiki/Extreme_Programming#Values" title="XP Values - Courage">courage</a> to pop the why stack.</p>

<p>It&#8217;s only by asking why that we&#8217;ll gain the understanding, insight,
and context necessary to effectively solve the problems we&#8217;re faced
with, to grow, and to improve.</p>

<p>So, <em>why</em> are you reading this post? :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAGNI Ain't What You Thing It Is]]></title>
    <link href="http://stevenharman.heroku.com/yagni-ainrsquot-what-you-thing-it-is/"/>
    <updated>2010-01-07T13:33:00-05:00</updated>
    <id>http://stevenharman.heroku.com/yagni-ainrsquot-what-you-thing-it-is</id>
    <content type="html"><![CDATA[<p>In the software development vernacular the term <acronym title="You
aren't gonna need it">YAGNI</acronym> is often used as a device to put
down attempts at prematurely adding functionality - things which are
only speculatively required. This makes sense given that is basically
the <a href="http://www.xprogramming.com/Practices/PracNotNeed.html" title="You're NOT gonna need it">definition</a> that <a href="http://www.xprogramming.com/" title="XProgramming : an Agile Software Development Resource">Ron Jeffries</a> and our <acronym
title="eXtreme Programming">XP</acronym> forefathers came up with so
long ago.</p>

<h3>Is that the whole story?</h3>

<p><a href="http://www.flickr.com/photos/z6p6tist6/501709581/" title="photo via: http://www.flickr.com/photos/z6p6tist6/501709581/"><img class="right" src="http://stevenharman.heroku.com/images/posts/stop-sign.jpg"></a> In short, I don&#8217;t think
so.</p>

<p>I&#8217;ve long believed there was more to YAGNI than what had been
canonically defined and was commonly understood. However, until recently
I was never able to put my finger on what was missing.</p>

<p>While listening to an episode of <a href="http://www.cincomsmalltalk.com/blog/blogView?showComments=true&amp;printTitle=Industry_Misinterpretations_164:_Going_for_the_Longball&amp;entry=3436948975" title="Industry Misinterpretations 164: Going for the Longball">Industry Misinterpretations</a> I
heard <a href="http://www.threeriversinstitute.org/Kent%20Beck.htm" title="Kent Beck @ Three Rivers Institute">Kent Beck</a> make a subtle point about the need to make progress
being more important than the completeness of the thing you&#8217;re building
at the point you&#8217;re building it.  Lending from this Kent&#8217;s insight and
mixing in much of my own experience, I realized YAGNI is not about
delaying building things until you need them; it&#8217;s that gaining real
experience in the problem domain, while making concrete progress, is
more important than trying to achieve a complete solution <em>right now</em>.</p>

<p>Do you think it&#8217;s too early to update the <a href="http://en.wikipedia.org/wiki/You_ain't_gonna_need_it" title="You ain't gonna need it">Wikipedia article</a>?</p>
]]></content>
  </entry>
  
</feed>
