<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Harman]]></title>
  <link href="http://stevenharman.heroku.com/atom.xml" rel="self"/>
  <link href="http://stevenharman.heroku.com/"/>
  <updated>2012-02-01T23:00:23-05:00</updated>
  <id>http://stevenharman.heroku.com/</id>
  <author>
    <name><![CDATA[Steven Harman]]></name>
    <email><![CDATA[contact@stevenharman.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Another Git Repository Visualization, Just for Fun.]]></title>
    <link href="http://stevenharman.heroku.com/another-git-repository-visualization-just-for-fun/"/>
    <updated>2011-07-01T21:46:00-04:00</updated>
    <id>http://stevenharman.heroku.com/another-git-repository-visualization-just-for-fun</id>
    <content type="html"><![CDATA[<p>I’ve created visualizations for Git repositories before – the one tracked a <a href="http://stevenharman.heroku.com/gain-new-insights-by-visualizing-what-youve-already-got" title="Gain New Insights by Visualizing What You’ve Already Got">product from its first commit through launch</a>. And while I still think there is some information and insight to be gleaned from such visualizations, the real reason I like to make them is&#8230; I think they&#8217;re neat.</p>

<p>To celebrate launching the latest incarnation of <a href="http://versionone.com/" title="VersionOne - it's pronounced Agilé">VersionOne</a>, I made another visualization! This one tracks all changes made in our Git repository that occurred between our last major release (in late February) right through the very last commit that made it into the <a href="http://www.versionone.com/release/2011/spring/" title="VersionOne Spring 2011 Release">Spring 2011 release</a>.</p>

<p>Wow… that really sounded like a sales pitch, didn’t it? I hate sales pitches!</p>

<p>Enough of that. Enjoy!</p>

<object width="560" height="315"><param name="movie" value="http://www.youtube.com/v/fYv9XgzY9Cc?version=3&amp;hl=en_US&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/fYv9XgzY9Cc?version=3&amp;hl=en_US&amp;rel=0" type="application/x-shockwave-flash" width="560" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Pull with Automatic Rebase]]></title>
    <link href="http://stevenharman.heroku.com/git-pull-with-automatic-rebase/"/>
    <updated>2011-06-09T22:57:00-04:00</updated>
    <id>http://stevenharman.heroku.com/git-pull-with-automatic-rebase</id>
    <content type="html"><![CDATA[<div class="thumbnail right"><a title="Y U NO REBASE!?!" href="https://skitch.com/stevenharman/fdhm5/y-u-no-rebase"><img class="right" title="Y U NO REBASE!?!" alt="y-u-no-rebase" src="https://img.skitch.com/20110609-jhy91eh42t193wquj6ryi91ura.preview.jpg" /></a>     <br /><span class="smallnote">Uploaded with <a href="http://skitch.com">Skitch</a>!</span></div>


<p>  <p>To rebase, or not to rebase… for me its not really a question. I generally prefer a clean, linear commit history. Why? Because merge bubbles make history confusing, noisy, break <code>git bisect</code>.</p>  <p>Don’t believe me? Check out the pretty log to the right. See all those merge bubbles in there? <em>Eww!</em></p>  <h3>The Why?</h3>  <p>The workflow that caused those merges was as follows:</p>  <ol>   <li><code>git pull</code> (to bring local up to date) </li>    <li><em>hackity-hack</em> </li>    <li><code>git commit</code> </li>    <li><code>git pull</code> </li>    <li><code>git push</code> </li> </ol>  <p>By default <code>git pull</code> will fetch any new commits from the remote, and then merge any local changes in, resulting in the merge bubbles.</p>  <h3>A better approach</h3>  <p>I typically use the same workflow as above with one tweak. Rather than <code>git pull</code>, I use <code>git pull --rebase</code>, which will fetch the remote commits, and rebase your commits on top of the new commits from the remote. This is the “re-writing” of history folks often talk about.</p>  <h3>Make it better, automatically!</h3>  <p>You can tell git to use rebase, rather than merge, in one of two ways, depending on your situation.</p>  <p>To have all future branches automatically use rebase</p>  <div class="csharpcode">   <pre class="alt">$ git config branch.autosetuprebase always</pre>
</div></p>

<p>You can add the <code>--global</code> switch to have all future branches, in all repositories on this machine, behave this way.</p>




<p>If, however, you have an existing branch, you’ll need</p>




<div class="csharpcode">
  <pre class="alt">$ git config branch.<em>branch-name</em>.rebase true</pre>
</div>




<h3>Get more info</h3>




<p>Be sure to check out the <a title="git-config Manual Page" href="http://www.kernel.org/pub/software/scm/git/docs/git-config.html" rel="external">git man pages</a> for more info on what those options mean and when you may or may not want to use them. </p>




<p>You might also want to check out my <a title="Git Workflows" href="https://github.com/stevenharman/git-workflows" rel="external">Git Workflows repository on The GitHubs</a> where you can find a Keynote presentation (or PDF in the Downloads) explaining <code>git rebase</code> vs. <code>git merge</code>. Complete with pictures!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gain New Insights by Visualizing What You’ve Already Got]]></title>
    <link href="http://stevenharman.heroku.com/gain-new-insights-by-visualizing-what-youve-already-got/"/>
    <updated>2010-02-24T22:32:00-05:00</updated>
    <id>http://stevenharman.heroku.com/gain-new-insights-by-visualizing-what-youve-already-got</id>
    <content type="html"><![CDATA[<p>I don’t know about you, but I like pretty things. Things that engage me. Shiny things. I enjoy seeing <em>the same old thing</em> in new and interesting ways. I suppose I’m just a visual kinda’ guy.</p>

<p>Unfortunately, the desire for visual representation is at odds with the high bandwidth flood of information we’re subjected to these days. Even if we manage to trim the overwhelming flood of information down to a laser-focused stream, it still takes an immense amount of effort to make sense of it.</p>

<h3>For example</h3>


<p>For years the primary way we’ve looked at the activity or interaction within various source control management systems is via log files. Yep… plain, text-laden, indecipherable logs chock full of entries each a similitude of it’s predecessors.</p>

<object width="560" height="315"><param name="movie" value="http://www.youtube.com/v/S_mMKXFaLaE?version=3&amp;hl=en_US&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/S_mMKXFaLaE?version=3&amp;hl=en_US&amp;rel=0" type="application/x-shockwave-flash" width="560" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>


<p>However, thanks to projects like <a title="Processing" href="http://processing.org/" rel="external">Processing</a> there may be a change on the horizon. Using tools of their ilk we can build exciting new ways to <em>see</em> and consume the vast seas of data we’re drowning in. By visualizing the data we are able to discover new and interesting patterns, behaviors, and insights.</p>

<h3>An example</h3>


<p>The video to the right is an example of one such visualization I produced using <a title="Gource - software version control visualization" href="http://code.google.com/p/gource/" rel="external">Gource</a> to analyze the Git repository of one of the product’s we’ve build at <a title="VersionOne: Simplifying Software Delivery" href="http://versionone.com/" rel="external">VersionOne</a>.</p>

<p>For reference, each branch (line) is a different directory containing files. Each leaf (dot) is a file, and different file types (Ruby, JavaScript, C#, etc.) have different colors. Each contributor is represented by their name and Gravatar.  The colored lines that occasionally connect a contributor to a file are color coded to represent adds (green), changes (orange) and deletes (red).</p>

<p>A few interesting things this visualization leads me to think about are</p>

<ul>
<li>how much churn happens in various parts of the code base?</li>
<li>where are we spending time?</li>
<li>is new-feature work well isolated? (perhaps an indicator of composition)</li>
<li>are there <em>specialists</em> within the team?</li>
</ul>


<p>Do any interesting things pop to mind when you watch the video? Let me know by leaving a comment.</p>
]]></content>
  </entry>
  
</feed>
