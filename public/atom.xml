<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Steven Harman]]></title>
  <link href="http://stevenharman.heroku.com/atom.xml" rel="self"/>
  <link href="http://stevenharman.heroku.com/"/>
  <updated>2012-05-08T13:01:24-04:00</updated>
  <id>http://stevenharman.heroku.com/</id>
  <author>
    <name><![CDATA[Steven Harman]]></name>
    <email><![CDATA[contact@stevenharman.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From Testing to Test First to Test Driven]]></title>
    <link href="http://stevenharman.heroku.com/from-testing-to-test-first-to-test-driven/"/>
    <updated>2012-05-08T11:16:00-04:00</updated>
    <id>http://stevenharman.heroku.com/from-testing-to-test-first-to-test-driven</id>
    <content type="html"><![CDATA[<p>When I started writing tests, around 2005, using JUnit, I was stoked just to
have the tests.</p>

<p>When I started writing tests first, around 2006, I was excited because I was
&#8220;doing the TDD.&#8221;</p>

<p>A couple of years later I found that writing tests was getting really painful.
Painful because they were so damn hard to set up, and painful because I had to
wait minutes for the test suite to run. I reacted to that pain and started to
change my tests. My tests got faster, but they were still painful.</p>

<p>At some point I realized the root cause of the pain was not the tests
themselves, but the design of the code under test. I had been doing Test-first
development, not Test-driven design. This all became clear to me in 2008, while
talking with <a href="http://coreyhaines.com/" title="The Software Journeyman">Corey Haines</a> about test pain, object oriented design, and
&#8220;listening&#8221; to the former to influence the latter.</p>

<p>Over the past few years my ideas one how to drive design by listening to tests
has solidified and been reaffirmed by talking and listening to
other <a href="https://www.destroyallsoftware.com/screencasts" title="Screencasts for Serious Developers">fast test fanatics</a>.</p>

<p>Rails has helped to jump-start this process for many; I see a lot of folks in
the Rails community get started where I was in 2005 or 2006, and many are
starting to feel some pain. The next step is to become more aware of that pain;
lower your pain threshold and then make it stop hurting!</p>

<p>It was by no means an overnight thing. It literally took years of work for me
to figure this out, but I hope by putting my experience out there, yours can be
better, faster, MOAR!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Another Git Repository Visualization, Just for Fun.]]></title>
    <link href="http://stevenharman.heroku.com/another-git-repository-visualization-just-for-fun/"/>
    <updated>2011-07-01T21:46:00-04:00</updated>
    <id>http://stevenharman.heroku.com/another-git-repository-visualization-just-for-fun</id>
    <content type="html"><![CDATA[<p>I’ve created visualizations for Git repositories before – the one tracked a <a href="http://stevenharman.heroku.com/gain-new-insights-by-visualizing-what-youve-already-got" title="Gain New Insights by Visualizing What You’ve Already Got">product from its first commit through launch</a>. And while I still think there is some information and insight to be gleaned from such visualizations, the real reason I like to make them is&#8230; I think they&#8217;re neat.</p>

<p>To celebrate launching the latest incarnation of <a href="http://versionone.com/" title="VersionOne - it's pronounced Agilé">VersionOne</a>, I made another visualization! This one tracks all changes made in our Git repository that occurred between our last major release (in late February) right through the very last commit that made it into the <a href="http://www.versionone.com/release/2011/spring/" title="VersionOne Spring 2011 Release">Spring 2011 release</a>.</p>

<p>Wow… that really sounded like a sales pitch, didn’t it? I hate sales pitches!</p>

<p>Enough of that. Enjoy!</p>

<object width="560" height="315"><param name="movie" value="http://www.youtube.com/v/fYv9XgzY9Cc?version=3&amp;hl=en_US&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/fYv9XgzY9Cc?version=3&amp;hl=en_US&amp;rel=0" type="application/x-shockwave-flash" width="560" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Pull with Automatic Rebase]]></title>
    <link href="http://stevenharman.heroku.com/git-pull-with-automatic-rebase/"/>
    <updated>2011-06-09T22:57:00-04:00</updated>
    <id>http://stevenharman.heroku.com/git-pull-with-automatic-rebase</id>
    <content type="html"><![CDATA[<p>To rebase, or not to rebase - for me its not really a question. I
generally prefer a clean, linear commit history. Why? Because merge bubbles make
history confusing, noisy, break <code>git bisect</code>.</p>

<p><a href="https://skitch.com/stevenharman/fdhm5/y-u-no-rebase"><img class="thumbnail right" src="https://img.skitch.com/20110609-jhy91eh42t193wquj6ryi91ura.preview.jpg" title="Y U NO REBASE!?!" alt="y-u-no-rebase"></a>
Don&#8217;t believe me? Check out the pretty log to the right. See all
those merge bubbles in there? <em>Eww!</em></p>

<h3>The Why?</h3>


<p>The workflow that caused those merges was as follows:</p>

<ol>
<li><code>git pull</code> (to bring local up to date)</li>
<li><em>hackity-hack</em></li>
<li><code>git commit</code></li>
<li><code>git pull</code></li>
<li><code>git push</code></li>
</ol>


<p>By default <code>git pull</code> will fetch any new commits from the remote, and
then merge any local changes in, resulting in the merge bubbles.</p>

<!-- more -->




<h3>A better approach</h3>


<p>I typically use the same workflow as above with one tweak. Rather than <code>git
pull</code> I use <code>git pull --rebase</code> which will fetch the remote commits,
and rebase your commits on top of the new commits from the remote. This is the
&acirc;&euro;&oelig;re-writing&acirc;&euro; of history folks often talk about.</p>

<h3>Make it better, automatically!</h3>


<p>You can tell git to use rebase, rather than merge, in one of two ways, depending on
your situation.</p>

<figure class='code'><figcaption><span>Force all new branches to automatically use rebase  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config branch.autosetuprebase always
</span></code></pre></td></tr></table></div></figure>


<p>You can add the <code>--global</code> switch to have all future branches, in all
repositories on this machine, behave this way.</p>

<figure class='code'><figcaption><span>Force existing branches to use rebase.  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config branch.*branch-name*.rebase <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Get more info</h3>


<p>Be sure to check out the <a title="git-config Manual Page" href=
"http://www.kernel.org/pub/software/scm/git/docs/git-config.html" rel="external">git
man pages</a> for more info on what those options mean and when you may or may not want
to use them.</p>

<p>You might also want to check out my <a title="Git Workflows" href=
"https://github.com/stevenharman/git-workflows" rel="external">Git Workflows repository
on The GitHubs</a> where you can find a Keynote presentation (or PDF in the Downloads)
explaining <code>git rebase</code> vs. <code>git merge</code> Complete with
pictures!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Io Language Vim Plugin]]></title>
    <link href="http://stevenharman.heroku.com/an-io-language-vim-plugin/"/>
    <updated>2011-02-11T16:27:00-05:00</updated>
    <id>http://stevenharman.heroku.com/an-io-language-vim-plugin</id>
    <content type="html"><![CDATA[<p>Who here doesn&#8217;t enjoy a little color in their life? I know I do, especially when
used to highlight the syntax of a language - as anyone who&#8217;s been around me while
downing a few pints can attest!</p>

<h3>Learning, Io, and Vim</h3>


<p><a href="http://stevenharman.heroku.com/images/posts/io-syntax.png"><img class="left" src="http://stevenharman.heroku.com/images/posts/io-syntax-thumb.png" title="Io Syntax Highlighting in Vim" ></a></p>

<p>In an attempt to feed our insatiable desire to learn, a
few of us at <a title="VersionOne: Simplifying Software Delivery" href=
"http://versionone.com" rel="external">VersionOne</a> are doing a book club on
<a title="Seven Languages in Seven Weeks: A Pragmatic Guide to Learning Programming Languages"
href=
"http://www.amazon.com/gp/product/193435659X?ie=UTF8&amp;tag=stevenharman-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=193435659X"
rel="external">Seven Languages in Seven Weeks</a>. We&#8217;re currently working on chapter
2: <a title="Io Language" href="http://iolanguage.com/" rel="external">Io</a>. My
current favorite editor is Vim. I wanted syntax highlighting for Io, in Vim.</p>

<p>I found a decent Vim script to get Io syntax highlighting, and then wrote a quick
<code>ftdetect</code> script to set Io-related files to use the Io syntax. The
resulting vim-io plugin is currently embedded <a title="vim-io: Io, for Vim!" href=
"https://github.com/stevenharman/config/tree/master/.vim/bundle/vim-io" rel=
"external">in my dotfiles on the GitHubs</a>, but if there&#8217;s interest I can pull them
out into a standalone plugin.</p>

<p>Grab it, enjoy it, fork and improve it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Caps Lock is Dumb; Make it Useful]]></title>
    <link href="http://stevenharman.heroku.com/caps-lock-is-dumb-make-it-useful/"/>
    <updated>2011-01-20T12:00:00-05:00</updated>
    <id>http://stevenharman.heroku.com/caps-lock-is-dumb-make-it-useful</id>
    <content type="html"><![CDATA[<p>I&#8217;ve long thought that <code>Caps Lock</code> was quite dumb. Yes, I&#8217;m sure there
is some archaic reason it exists, but the truth is I don&#8217;t care. I don&#8217;t
find it useful and am annoyed that it&#8217;s taking up valuable room on my <a
title="The Home Row and Touch Typing"
href="http://en.wikipedia.org/wiki/Touch_typing" rel="external">Home
Row</a>. The more I use Vim the more angry I get at the <code>Caps Lock</code> key.</p>

<h3>Making Caps Lock Useful, on The Mac</h3>

<p>I long ago remapped <code>Caps Lock</code> to <code>Esc</code> on my Mac - which worked
great for <a title="the missing editor" href="http://macromates.com/"
rel="external">TextMate</a>. However, these days I spend the majority of
my time in <a title="Vim for the Mac"
href="http://code.google.com/p/macvim/" rel="external">Vim</a> or <a
title="Zeee Shell" href="http://www.zsh.org/" rel="external">Zsh</a> (in
Vim mode) where I&#8217;d much prefer to have <code>Ctrl</code> on my Home Row.
Remapping <code>Caps Lock</code> to <code>Ctrl</code> is trivial on OS X; it&#8217;s baked in
via <em>System Preferences > Keyboard Preferences > Modifier Keys</em>.</p>

<!-- more -->


<h3>Making Caps Lock Useful, on The Windows</h3>

<p>To my knowledge, there is nothing baked into the <acronym
title="Operating System">OS</acronym> that makes this easy, but there
are a handful of utilities that will let you remap most keys. I opted
for the Lo-Fi route - hacking the registry to remap <code>Caps Lock</code> to
<code>Ctrl</code>.</p>

<div><script src='https://gist.github.com/788631.js?file='></script>
<noscript><pre><code>REGEDIT4
 [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
 &quot;Scancode Map&quot;=hex:00,00,00,00,00,00,00,00,02,00,00,00,1d,00,3a,00,00,00,00,00
</code></pre></noscript></div>


<p>To use it, just download/save the raw <code>.reg</code> file to your Windows box,
and the run (double-click, whatever) it.</p>

<p>And there you have it. Good bye, annoying <code>Caps Lock</code>. Hello, useful
stuff!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A First Step to Better User Experience: Thinking Like a Human]]></title>
    <link href="http://stevenharman.heroku.com/a-first-step-to-better-user-experience-thinking-like-a-human/"/>
    <updated>2010-12-08T12:18:00-05:00</updated>
    <id>http://stevenharman.heroku.com/a-first-step-to-better-user-experience-thinking-like-a-human</id>
    <content type="html"><![CDATA[<p>As we strive to build more humane user experiences it is important to
not only consider what data to, or <em>not to</em>, show, but also <em>how</em> we
present that data.</p>

<p>An example from our recent <a title="VersionOne: Conversations"
href="http://versionone.com/Product/Collaboration.asp"
rel="external">Conversations</a> feature is the date and time at which
portions of a conversation take place.</p>

<p><a href="http://stevenharman.heroku.com/images/posts/fuzzy-time.png"><img class="left" src="http://stevenharman.heroku.com/images/posts/fuzzy-time-thumb.png" title="humate date and time via jquery.timeago" ></a>
Notice the two highlighted areas. The
tooltip shows fully-formatted, and much more precise information, with
the &#8220;less than a minute ago&#8221; text being a more fuzzy, human-friendly
presentation of the same data.</p>

<p>There is no question that the precise data is valuable, but when it
comes to human users of a system, it may not be the most consumable
form. The full-fidelity information is still available to the user who
cares to engage the application, when he cares to engage it.</p>

<p>Whether its fuzzy dates and time, or using avatars instead of user
names, or any number of other examples, the point is to <em>think</em> about
the human experience when designing for, well, humans.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Handful of Git Workflows for the Agilist]]></title>
    <link href="http://stevenharman.heroku.com/a-handful-of-git-workflows-for-the-agilist/"/>
    <updated>2010-08-12T12:44:00-04:00</updated>
    <id>http://stevenharman.heroku.com/a-handful-of-git-workflows-for-the-agilist</id>
    <content type="html"><![CDATA[<p>A few months back I gave <a href="http://www.thepathtoagility.org/" title="the path to agility conference">little talk</a> on the darling <acronym
title="Source Control Management">SCM</acronym> tool of the Open Source
world, <a href="http://git-scm.com/" title="Git: the fast version control system">Git</a>. After the conference, the organizers asked for a copy
of the presentation materials I&#8217;d used - something I usually find little
value in as the content of a discussion is far more than just the
collateral used.</p>

<p>At any rate, I obliged, sent off a PDF, and have <a href="http://github.com/stevenharman/git-workflows" title="a handful of Git workflows for the agilist">opened the talk up</a>
for others to use and improve. You can find the source (Keynote
presentation, images, etc.) on GitHub. Fork and modify the talk to your
heart&#8217;s content. ♡</p>

<p>Oh, and the <a href="http://github.com/stevenharman/git-workflows/downloads" title="download the PDF version">PDF is there</a> too.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Want to Make Money? Make Getting Paid the Easy Part!]]></title>
    <link href="http://stevenharman.heroku.com/want-to-make-money-make-getting-paid-the-easy-part/"/>
    <updated>2010-04-07T12:52:00-04:00</updated>
    <id>http://stevenharman.heroku.com/want-to-make-money-make-getting-paid-the-easy-part</id>
    <content type="html"><![CDATA[<p>At least half a dozen times in the past three days I&#8217;ve been so annoyed
by the payment process for various goods and/or services that I either
didn&#8217;t purchase the thing, or had a minor meltdown after the whole
ordeal was over.</p>

<p>Why do merchants insist on making it so damned difficult for their
customers to get the goods?</p>

<h3>A few frustrating examples</h3>

<p>Ever been to a sporting event where the beer vendor only accept cash,
has no cash-register, and yet insists on charging a partial dollar
amount per unit of booze? $6.65 for a beer. Really? Just call it $7
and make the math easy for everyone. Or have a cash register at each
kiosk. Or, here&#8217;s a novel idea, start accepting plastic!</p>

<p>Need to renew your vehicle registration? Just do it online! But be
prepared to spend an extra $5 for the <em>convenience</em> of, you knowâ€¦
actually giving them the money now rather than sending a check and them
having to pay someone to physically handle the thing.</p>

<h3>Two simple rules for making money</h3>

<ol>
<li>If you&#8217;re selling something someone wants: <strong>make it easy for them to
give you their money!</strong></li>
<li>If you&#8217;re selling something someone does not want: <strong>make them want
it!</strong></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gain New Insights by Visualizing What You’ve Already Got]]></title>
    <link href="http://stevenharman.heroku.com/gain-new-insights-by-visualizing-what-youve-already-got/"/>
    <updated>2010-02-24T22:32:00-05:00</updated>
    <id>http://stevenharman.heroku.com/gain-new-insights-by-visualizing-what-youve-already-got</id>
    <content type="html"><![CDATA[<p>I don’t know about you, but I like pretty things. Things that engage me. Shiny things. I enjoy seeing <em>the same old thing</em> in new and interesting ways. I suppose I’m just a visual kinda’ guy.</p>

<p>Unfortunately, the desire for visual representation is at odds with the high bandwidth flood of information we’re subjected to these days. Even if we manage to trim the overwhelming flood of information down to a laser-focused stream, it still takes an immense amount of effort to make sense of it.</p>

<h3>For example</h3>


<p>For years the primary way we’ve looked at the activity or interaction within various source control management systems is via log files. Yep… plain, text-laden, indecipherable logs chock full of entries each a similitude of it’s predecessors.</p>

<object width="560" height="315"><param name="movie" value="http://www.youtube.com/v/S_mMKXFaLaE?version=3&amp;hl=en_US&amp;rel=0"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="http://www.youtube.com/v/S_mMKXFaLaE?version=3&amp;hl=en_US&amp;rel=0" type="application/x-shockwave-flash" width="560" height="315" allowscriptaccess="always" allowfullscreen="true"></embed></object>




<!-- more -->


<p>However, thanks to projects like <a title="Processing" href="http://processing.org/" rel="external">Processing</a> there may be a change on the horizon. Using tools of their ilk we can build exciting new ways to <em>see</em> and consume the vast seas of data we’re drowning in. By visualizing the data we are able to discover new and interesting patterns, behaviors, and insights.</p>

<h3>An example</h3>


<p>The video to the right is an example of one such visualization I produced using <a title="Gource - software version control visualization" href="http://code.google.com/p/gource/" rel="external">Gource</a> to analyze the Git repository of one of the product’s we’ve build at <a title="VersionOne: Simplifying Software Delivery" href="http://versionone.com/" rel="external">VersionOne</a>.</p>

<p>For reference, each branch (line) is a different directory containing files. Each leaf (dot) is a file, and different file types (Ruby, JavaScript, C#, etc.) have different colors. Each contributor is represented by their name and Gravatar.  The colored lines that occasionally connect a contributor to a file are color coded to represent adds (green), changes (orange) and deletes (red).</p>

<p>A few interesting things this visualization leads me to think about are</p>

<ul>
<li>how much churn happens in various parts of the code base?</li>
<li>where are we spending time?</li>
<li>is new-feature work well isolated? (perhaps an indicator of composition)</li>
<li>are there <em>specialists</em> within the team?</li>
</ul>


<p>Do any interesting things pop to mind when you watch the video? Let me know by leaving a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Don't We Ask Why?]]></title>
    <link href="http://stevenharman.heroku.com/why-dont-we-ask-why/"/>
    <updated>2010-02-18T12:58:00-05:00</updated>
    <id>http://stevenharman.heroku.com/why-dont-we-ask-why</id>
    <content type="html"><![CDATA[<p>Have you ever thought about just how much time we software folk spend
focused on the technologies we&#8217;re using, on implementation minutia,
and on all of the shiny new <em>solutions</em> we <em>should</em> be using?</p>

<p><a href="http://www.flickr.com/photos/marcobellucci/3534516458/" title="photo via: http://www.flickr.com/photos/marcobellucci/3534516458/"><img class="right" src="http://stevenharman.heroku.com/images/posts/question-mark.jpg"></a></p>

<p>Now contrast that with how often we stop to think about the <strong>Whys</strong>?</p>

<p>Why are we being asked to solve <em>fizz-buzz-thing</em>; do we understand the
motivation and context behind the problem, or are we fixated on how
we&#8217;ll build the solution? Are we asking why a problem occurred, or are
we merely focused on how we fixed it, this time?</p>

<h3>Why don&#8217;t we ask &#8220;Why?&#8221;</h3>

<p>Frankly, because we&#8217;d rather spend our time in the comfortable arena
of <strong>how</strong> than venture into the sometimes uneasy realm of <strong>why</strong>.</p>

<blockquote><p>She didn&#8217;t want to know how a thing was done, but why. That can be<br/>embarrassing. You ask *Why* to a lot of things and you wind up<br/>very unhappy indeed, if you keep at it.<br/>- Captain Beatty</p><footer><strong>Ray Bradburry</strong> <cite><a href='http://www.amazon.com/dp/0345342968/?tag=stevenharman-20'>Fahrenheit 451</a></cite></footer></blockquote>




<!-- more -->


<p>Asking why often forces us to face the truth, and that truth can be
uncomfortable. We need to have the courage to face those truths and
coninue to ask why; we must have the <a href="http://en.wikipedia.org/wiki/Extreme_Programming#Values" title="XP Values - Courage">courage</a> to pop the why stack.</p>

<p>It&#8217;s only by asking why that we&#8217;ll gain the understanding, insight,
and context necessary to effectively solve the problems we&#8217;re faced
with, to grow, and to improve.</p>

<p>So, <em>why</em> are you reading this post? :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAGNI Ain't What You Thing It Is]]></title>
    <link href="http://stevenharman.heroku.com/yagni-ainrsquot-what-you-thing-it-is/"/>
    <updated>2010-01-07T13:33:00-05:00</updated>
    <id>http://stevenharman.heroku.com/yagni-ainrsquot-what-you-thing-it-is</id>
    <content type="html"><![CDATA[<p>In the software development vernacular the term <acronym title="You
aren't gonna need it">YAGNI</acronym> is often used as a device to put
down attempts at prematurely adding functionality - things which are
only speculatively required. This makes sense given that is basically
the <a href="http://www.xprogramming.com/Practices/PracNotNeed.html" title="You're NOT gonna need it">definition</a> that <a href="http://www.xprogramming.com/" title="XProgramming : an Agile Software Development Resource">Ron Jeffries</a> and our <acronym
title="eXtreme Programming">XP</acronym> forefathers came up with so
long ago.</p>

<h3>Is that the whole story?</h3>

<p><a href="http://www.flickr.com/photos/z6p6tist6/501709581/" title="photo via: http://www.flickr.com/photos/z6p6tist6/501709581/"><img class="right" src="http://stevenharman.heroku.com/images/posts/stop-sign.jpg"></a> In short, I don&#8217;t think
so.</p>

<p>I&#8217;ve long believed there was more to YAGNI than what had been
canonically defined and was commonly understood. However, until recently
I was never able to put my finger on what was missing.</p>

<p>While listening to an episode of <a href="http://www.cincomsmalltalk.com/blog/blogView?showComments=true&amp;printTitle=Industry_Misinterpretations_164:_Going_for_the_Longball&amp;entry=3436948975" title="Industry Misinterpretations 164: Going for the Longball">Industry Misinterpretations</a> I
heard <a href="http://www.threeriversinstitute.org/Kent%20Beck.htm" title="Kent Beck @ Three Rivers Institute">Kent Beck</a> make a subtle point about the need to make progress
being more important than the completeness of the thing you&#8217;re building
at the point you&#8217;re building it.  Lending from this Kent&#8217;s insight and
mixing in much of my own experience, I realized YAGNI is not about
delaying building things until you need them; it&#8217;s that gaining real
experience in the problem domain, while making concrete progress, is
more important than trying to achieve a complete solution <em>right now</em>.</p>

<p>Do you think it&#8217;s too early to update the <a href="http://en.wikipedia.org/wiki/You_ain't_gonna_need_it" title="You ain't gonna need it">Wikipedia article</a>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OMG, Better Rake (for .net)!]]></title>
    <link href="http://stevenharman.heroku.com/omg-better-rake-for-.net/"/>
    <updated>2009-11-23T13:58:00-05:00</updated>
    <id>http://stevenharman.heroku.com/omg-better-rake-for-.net</id>
    <content type="html"><![CDATA[<p>If you ask me, when it comes tools for writing automated build scripts
nothing packs more bang for the buck than <a href="http://rake.rubyforge.org/" title="Rake - Ruby Make">Rake</a>. Until recently,
using Rake to build .net solutions required a magic concoction of hacked
together scripts which rarely exhibited Ruby&#8217;s appreciation for beauty
nor Rake&#8217;s spirit of simplicity.</p>

<p>Luckily our buddy <a rel="met friend"
href="http://www.lostechies.com/blogs/derickbailey/" title="Derick
Bailey's blog">Derick Bailey</a> decided it was time to bite the bullet
and start building some <em><a href="http://www.lostechies.com/blogs/derickbailey/archive/2009/09/17/how-a-net-developer-hacked-out-a-rake-task.aspx" title="How A .NET Developer Hacked Out a Rake Task">real Rake tasks</a></em> that were special suited
for building .net code. The result is <a href="http://github.com/derickbailey/Albacore" title="Albacore: A Suite Of Rake Build Tasks For .NET Solutions">Albacore</a>.</p>

<!-- more -->


<h3>Using Rake for .net <acronym title="In Real Life">IRL</acronym></h3>

<p>I&#8217;ve been using Rake to <a href="http://stevenharman.net/blog/archive/2009/05/29/being-lazy-with-rake.aspx" title="Being Lazy with Rake">be lazy</a> for a while. And we, the
<a href="http://versionone.com/" title="VersionOne: Simplifying Software Delivery">VersionOne</a> dudes &amp; dudettes, have been using it to help automate
our <acronym title="Continuous Integration">CI</acronym> builds for over
a year now. And just last week we started ditching much of our
hacky-Rake-script inventory in favor of more concise, tested, and
readable Rake tasks via Albacore.</p>

<p>During the migration I&#8217;ve run into a few small hitches here and there,
but nothing that I couldn&#8217;t track down, write a test for, and fix
within a couple of <a href="http://www.infoq.com/news/2009/09/Pomodoro" title="Pomodoro - An Agile Approach to Time Management">tomatoes</a>. In one case I discovered an issue,
called Derick to confirm, suggested a fix, and had a new Albacore Gem
published within a couple of hours. <em>Hawt!</em></p>

<p>Albacore already has a decent number of tasks baked in, and the list is
growing all the time!</p>

<ul>
<li><a href="http://wiki.github.com/derickbailey/Albacore/assemblyinfotask">AssemblyInfoTask</a> - Generate an AssemblyInfo.cs file.
Currently only supports C#</li>
<li><a href="http://wiki.github.com/derickbailey/Albacore/expandtemplatestask">ExpandTemplatesTask</a> - expand template files with #{setting}
markers, using YAML configuration files as the data</li>
<li><a href="http://wiki.github.com/derickbailey/Albacore/ncoverconsoletask">NCoverConsoleTask</a> - Run code coverage analysis through NCover&#8217;s <code>NCover.Console</code></li>
<li><a href="http://wiki.github.com/derickbailey/Albacore/ncoverreporttask">NCoverReportTask</a> - Check code coverage and get detailed
reports through NCover&#8217;s <code>NCover.Reporting</code></li>
<li>NUnitTask - run NUnit test suites</li>
<li><a href="http://wiki.github.com/derickbailey/Albacore/msbuildtask">MSBuildTask</a> - Build a Visual Studio solution (<code>.sln</code>) or
MSBuild file</li>
<li><a href="http://wiki.github.com/derickbailey/Albacore/renametask">Rename Task</a> - Rename a file</li>
<li><a href="http://wiki.github.com/derickbailey/Albacore/sftptask">SftpTask</a> - Upload a file to a remote server via secure FTP
connection</li>
<li><a href="http://wiki.github.com/derickbailey/Albacore/sqlcmdtask">SQLCmdTask</a> - Run scripts and other commands through SQL
Server&#8217;s <code>sqlcmd.exe</code></li>
<li><a href="http://wiki.github.com/derickbailey/Albacore/sshtask">SshTask</a> - Run a command on a remote system via a secure
shell connection</li>
<li><a href="http://wiki.github.com/derickbailey/Albacore/ziptask">ZipTask</a> - Package your build artifacts into a .zip for
easier distribution source data</li>
</ul>


<h3>Contribute!</h3>

<p>As we move more and more of our custom stuff over I&#8217;ll continue to add
features to Albacore, enhancing the great work the core team is doing.
In fact, I&#8217;m already planning a <a href="http://github.com/derickbailey/Albacore/issues/#issue/27" title="Albacore::NAntTask - for migrating to Rake">NAnt task</a> to help those folks in
the process of migrating from an existing NAnt-based build script to
Rake. Look for it soon!</p>

<h3>Resources</h3>

<ul>
<li><a href="http://github.com/derickbailey/Albacore" title="Albacore: A Suite of Rake Build Tasks For .Net Solutions">Albacore on GitHub</a></li>
<li><a href="http://wiki.github.com/derickbailey/Albacore" title="Albacore Wiki">Albacore Wiki</a></li>
<li><a href="http://codebetter.com/blogs/david_laribee/archive/2008/08/25/omg-rake.aspx" title="OMG Rake!">OMG Rake!</a> - The original post which first inspired many to
use Rake with .net</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Code is Key to Writing Good Code]]></title>
    <link href="http://stevenharman.heroku.com/reading-code-is-key-to-writing-good-code/"/>
    <updated>2009-11-18T14:06:00-05:00</updated>
    <id>http://stevenharman.heroku.com/reading-code-is-key-to-writing-good-code</id>
    <content type="html"><![CDATA[<p>As humans we seem to have an innate desire for structure in our lives. Structure permeates through our societies; it&#8217;s found within our families, education systems, governments, etc. I suppose it&#8217;s no surprise then that we also seek to <em>force</em> structure upon the work that we, as software developers, do.</p>

<p>The problem is the work we do isn&#8217;t structured. It is not deterministic. There is no grand blue print, process, nor methodology that we can follow to pay dirt.</p>

<p>We live in a chaotic and complex world that is itself continuously changing and adapting.</p>

<p>Software product development is a creative activity taking place in the midst of that complex and adaptive world. So doesn&#8217;t it make sense that we, as software developers, might benefit from admitting that we are indeed doing creative, unstructured, adaptive work? <em>I sure think so!</em></p>

<!-- more -->


<h3>Looking outward for inspiration</h3>

<p>I&#8217;ve recently been looking outward to other creative professions and trades for inspiration and insights into how they work. One thing I&#8217;ve realized is that those folks spend an immense amount of time studying and seeking inspiration from the work of others both within and outside their own field.</p>

<p>For example, a musician doesn&#8217;t just sit in his garage all day, banging out albums. He listens to and is influenced by the music of many other musicians. An author doesn&#8217;t simply site down and write manuscript after manuscript. She spends countless hours reading the classics, studying the words, flow, and style of other authors. The same thing goes for painters, actors, architects, etc. And all of these people are constantly immersing them selves in works outside their area; musicians reading Hemingway, singer/song writers studying Salvador Dali, painters listening to Mozart, cats and dogs living together&#8230;</p>

<p>How arrogant of we programmers then to think that we won&#8217;t, or don&#8217;t, benefit from reading code written by - <em>gasp</em> - someone else!</p>

<h3>Read, learn, and be inspired</h3>

<p><img class="right" src="http://stevenharman.heroku.com/images/posts/text.jpg" title="Yay for reading!" >
In my experience we spend a great deal more time reading code than actually <em>writing</em> it. Whether it be the code you wrote just a few minutes ago or something you&#8217;ve inherited and are now maintaining, you&#8217;re reading it. Of course, that&#8217;s only considering the motive of reading code because you&#8217;re currently working with.</p>

<p>The greatest motivator for reading code is the opportunity it provides for learning and serving as a source of inspiration. Reading code exposes you to techniques, view points, styles, idioms, and algorithms that you may not have otherwise come across.</p>

<p>In my own career it was by reading code written in Ruby that I first started to develop an appreciation for beauty and aesthetics in code. It also opened me to new ways of thinking about problems and exposed many pains and frictions with the techniques I had been using to that point.</p>

<h3>Where to start?</h3>

<p>I realize it&#8217;s probably obvious, but I&#8217;m going to say it anyhow - a great way to start reading other&#8217;s code is to pull down an Open Source project and dive in. Of course, that&#8217;s not to say that all Open Source code bases are necessarily examples of great code&#8217; so you might also want to leverage your network to find examples. Or, use your Google-fu to see what others are reading. Or maybe check out:</p>

<ul>
<li><a href="http://katas.softwarecraftsmanship.org/" title="Software Craftsmanship - Katas">Katacasts</a> by <a title="Corey Haines" href="http://www.coreyhaines.com/" rel="friend met">Corey Haines</a> and Chris Parsons</li>
<li><a href="http://www.hanselman.com/blog/CategoryView.aspx?category=Source+Code">The Weekly Source Code</a> series by <a title="Scott Hanselman's Computer Zen" href="http://www.hanselman.com" rel="colleague met">Scott Hanselman</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prefer Dependency Injection to Service Location]]></title>
    <link href="http://stevenharman.heroku.com/prefer-dependency-injection-to-service-location/"/>
    <updated>2009-09-25T14:17:00-04:00</updated>
    <id>http://stevenharman.heroku.com/prefer-dependency-injection-to-service-location</id>
    <content type="html"><![CDATA[<p>There is currently a thread running over in the StructureMap Users mailing list asking <a href="http://groups.google.com/group/structuremap-users/browse_thread/thread/2ee1a7eab03d7f2a">if we really need constructor injection</a> when using an Inversion of Control container. Before any one rips off on a rant let me say that I worked with <a title="JonKruger.com" href="http://www.jonkruger.com/" rel="friend met co-worker">Jon</a> in my former life and I&#8217;m fairly certain he&#8217;s merely conducting a thought experiment, trying to sure up his own beliefs. A worthwhile exercise, if you ask me.</p>

<p>At any rate, I have a few points I wanted to throw out there; most of them basic and mere reiterations of the words of others, but I&#8217;m gong to do it anyhow!</p>

<!-- more -->


<h3>The question at hand</h3>

<p>I would encourage you to go read the full thread (it&#8217;s a quick read&#8230; 4 minutes, tops!), but knowing many of you are lazy like me, I&#8217;ll reprint Jon&#8217;s original question here.</p>

<p><em>Again, please go read the full thread so you have the full context.</em></p>

<blockquote><p>Whenever I tell people about StructureMap (or using <acronym title="Dependency Injection">DI</acronym> in general), I mention that two of the benefits are that (a) StructureMap will create objects and all their dependencies for you and (b) it enables you to fake out the dependencies in a test.</p><p>Why do we need constructor injection to do this?  I can call `ObjectFactory.GetInstance()` anytime I want and it will work.  And I could leave SM configured for my tests and call `ObjectFactory.Inject()` to stub things out.</p><p>So theoretically, I wouldn&#8217;t even need constructor injection, right?</p><footer><strong>Jon Kruger</strong> <cite><a href='http://groups.google.com/group/structuremap-users/browse_thread/thread/2ee1a7eab03d7f2a'>StructureMap ML_</a></cite></footer></blockquote>


<h3>Let&#8217;s get the jargon down</h3>

<p>To be clear, Jon proposing using <a href="http://martinfowler.com/articles/injection.html#UsingAServiceLocator" title="Using a Service Locator">Service Location</a> rather than <a href="http://en.wikipedia.org/wiki/Dependency_injection" title="Dependency Injection">Dependency Injection</a>.</p>

<p>While Service location is better than <a href="http://www.lostechies.com/blogs/jimmy_bogard/archive/2009/07/03/how-not-to-do-dependency-injection-in-nerddinner.aspx">poor-man&#8217;s DI</a>, using it as suggested above is still introducing a high degree of coupling as all of these classes now have an opaque and highly concrete dependency on the container. This is effectively creating a new form of <code>Global</code>. <em>Eww!</em></p>

<p>The key to using Service Location within <strong>new code</strong> is to keep it tucked away in the deepest, darkest corners of your infrastructure. For example, if you&#8217;re building something on the asp.net mvc stack, you might use Service Location within a custom <code>IControllerFactory</code> to create each of your controllers.</p>

<p>If you&#8217;re dealing with <strong>legacy code</strong>, full of concrete dependencies, you might use Service Location as technique for teasing things apart with a goal of decreased hard coupling. In the end this may result in wholesale replacement of some modules.</p>

<p>When it comes to Dependency Injection and dependencies in general, I agree with <a href="http://blog.scottbellware.com/" rel="friend met">Scott Bellware&#8217;s</a> point of view; make your <a href="http://codebetter.com/blogs/scott.bellware/archive/2007/06/28/164867.aspx" title="Dependency Patterns: Optional Dependencies and Primal Dependencies">dependencies explicit &amp; transparent</a> by requiring them in the constructor. My gut reaction is also to avoid translucent (setter-injected) dependencies as they make it harder to tell what dependencies an object will need to do its job - the shape of the object isn&#8217;t as clear as with explicit constructor dependencies.</p>

<h3>Feeling the friction</h3>

<p>I tend to be lazy and prefer to feel friction of poor design early so I can change direction quickly. For example, when a constructor gets too large it&#8217;s a signal to stop and consider <a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod" title="Uncle Bob's Principles of Object Oriented Design">Single Responsibility Principle, Separation of Concerns, etc</a>. In a similar vein, I don&#8217;t usually advocate use of an <a href="http://www.lostechies.com/blogs/joshuaflanagan/archive/2009/02/03/auto-mocking-explained.aspx" title="Auto-mocking Explained">auto-mocking container</a>. Or at least not for folks who&#8217;ve not yet acquired a strong nose for design and simplicity; the friction helps keep you on the rails.</p>

<p>Later in the tread Jon mentions some friction he&#8217;s been feeling when setting up the <a href="http://stevenharman.net/blog/archive/2009/05/27/toward-a-better-use-of-context-specification.aspx" title="Toward a Better Use of Context/Specification">context</a> of his tests (or specs). Namely he&#8217;s having to set up and inject a lot of concrete objects for interaction within his unit tests. To me this is an indication that those tests may actually be integration tests. After all, they are flexing the integration of a several modules in concert, right?</p>

<p>I say, call them what they are, fire up the fully configured container, and move on.</p>

<p>I prefer to make the implicit explicit, to be able easily see the shape of an object, and in getting forced feedback when my design starts to slip off the rails.</p>
]]></content>
  </entry>
  
</feed>
